//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;

namespace NHibernate.Cache
{
	using System.Threading.Tasks;
	using System.Threading;
	internal partial class ActionRecordingCache : CacheBase
	{

		public override async Task<object> GetAsync(object key, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var instance = await (_innerCache.GetAsync(key, cancellationToken)).ConfigureAwait(false);
			if (instance != null)
			{
				return instance;
			}
			return await (_outerCache.GetAsync(key, cancellationToken)).ConfigureAwait(false);
		}

		public override async Task PutAsync(object key, object value, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (_innerCache.PutAsync(key, value, cancellationToken)).ConfigureAwait(false);
			_actions.Enqueue(c => c.Put(key, value));
		}

		public override async Task RemoveAsync(object key, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (_innerCache.RemoveAsync(key, cancellationToken)).ConfigureAwait(false);
			_actions.Enqueue(c => c.Remove(key));
		}

		public override async Task ClearAsync(CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (_innerCache.ClearAsync(cancellationToken)).ConfigureAwait(false);
			_actions.Clear();
			_actions.Enqueue(c => c.Clear());
		}

		public override async Task<object> LockAsync(object key, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			var @lock = await (_innerCache.LockAsync(key, cancellationToken)).ConfigureAwait(false);
			_actions.Enqueue(c => c.Lock(key));
			return @lock;
		}

		public override async Task UnlockAsync(object key, object lockValue, CancellationToken cancellationToken)
		{
			cancellationToken.ThrowIfCancellationRequested();
			await (_innerCache.UnlockAsync(key, lockValue, cancellationToken)).ConfigureAwait(false);
			_actions.Enqueue(c => c.Unlock(key, lockValue));
		}
	}
}
